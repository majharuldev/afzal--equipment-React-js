import BtnSubmit from "../../components/Button/BtnSubmit";
import { FiCalendar } from "react-icons/fi";
import { FormProvider, useForm } from "react-hook-form";
import { InputField, SelectField } from "../../components/Form/FormFields";
import { useContext, useEffect, useRef, useState } from "react";
import toast, { Toaster } from "react-hot-toast";
import axios from "axios";
import useRefId from "../../hooks/useRef";
import { useNavigate, useParams } from "react-router-dom";
import api from "../../utils/axiosConfig";
import { AuthContext } from "../../providers/AuthProvider";

const GarageCustomerForm = () => {
    const [loading, setLoading] = useState(false);
    const [isEdit, setIsEdit] = useState(false);
    const dateRef = useRef(null);
    const methods = useForm();
    const navigate = useNavigate();
    const { id } = useParams(); // Update ‡¶π‡¶≤‡ßá ‡¶Ü‡¶á‡¶°‡¶ø ‡¶Ü‡¶∏‡¶¨‡ßá
    const { handleSubmit, reset, register, setValue, control } = methods;
    const generateRefId = useRefId();
    const { user } = useContext(AuthContext);

    // ‡¶Ø‡¶¶‡¶ø Update ‡¶Æ‡ßã‡¶° ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶°‡¶æ‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶¨‡ßã
    useEffect(() => {
        if (id) {
            setIsEdit(true);
            api
                .get(`/garageCustomer/${id}`)
                .then((res) => {
                    if (res.data.success) {
                        const customer = res.data.data;
                        Object.keys(customer).forEach((key) => {
                            setValue(key, customer[key]);
                        });
                    }
                })
                .catch((err) => {
                    console.error(err);
                    toast.error("‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶®‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø");
                });
        }
    }, [id, setValue]);

    // ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (Add & Update)
    const onSubmit = async (data) => {
        try {
            setLoading(true);
            // const formData = new FormData();
            // for (const key in data) {
            //     formData.append(key, data[key]);
            // }
            // if (!isEdit) {
            //     formData.append("ref_id", generateRefId());
            // }

            const payload = {
                ...data,
                created_by: user?.name || "system",
            };

            // üîπ Generate ref_id only when adding new
            if (!isEdit) {
                payload.ref_id = generateRefId();
            }


            const url = isEdit
                ? `/garageCustomer/${id}`
                : `/garageCustomer`;

            const response = isEdit
                ? await api.put(url, payload)
                : await api.post(url, payload);
            const resData = response.data;

            if (resData.success) {
                toast.success(
                    isEdit
                        ? "‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶π‡¶æ‡¶≤‡¶®‡¶æ‡¶ó‡¶æ‡¶¶ ‡¶π‡ßü‡ßá‡¶õ‡ßá!"
                        : "‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!"
                );
                reset();
                navigate("/tramessy/garage");
            } else {
                toast.error("‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: " + (resData.message || "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø"));
            }
        } catch (error) {
            console.error(error);
            const errorMessage =
                error.response?.data?.message || error.message || "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø";
            toast.error("‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: " + errorMessage);
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="">
            <Toaster />

            <div className="mx-auto p-6 rounded-b-md rounded-t-md shadow border border-gray-300">
                <h3 className=" pb-4 text-primary font-semibold ">
                    {isEdit ? "‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®" : "‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®"}
                </h3>
                <FormProvider {...methods}>
                    <form onSubmit={handleSubmit(onSubmit)}>
                        <div className="md:flex justify-between gap-3">
                            <div className="w-full">
                                <InputField
                                    name="date"
                                    label="‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ"
                                    type="date"
                                    required
                                    inputRef={(e) => {
                                        register("date").ref(e);
                                        dateRef.current = e;
                                    }}

                                />
                            </div>
                            <div className="w-full relative">
                                <InputField name="customer_name" label="‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ" required />
                            </div>
                            <div className="mt-3 md:mt-0 w-full relative">
                                <InputField name="customer_mobile" label="‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤" required />
                            </div>
                            <div className="w-full">
                                <SelectField
                                    name="month_name"
                                    label="‡¶Æ‡¶æ‡¶∏"
                                    required
                                    options={[
                                        { value: "January", label: "‡¶ú‡¶æ‡¶®‡ßÅ‡ßü‡¶æ‡¶∞‡¶ø" },
                                        { value: "February", label: "‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ‡ßü‡¶æ‡¶∞‡¶ø" },
                                        { value: "March", label: "‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö" },
                                        { value: "April", label: "‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤" },
                                        { value: "May", label: "‡¶Æ‡ßá" },
                                        { value: "June", label: "‡¶ú‡ßÅ‡¶®" },
                                        { value: "July", label: "‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á" },
                                        { value: "August", label: "‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü" },
                                        { value: "September", label: "‡¶∏‡ßá‡¶™‡ßç‡¶ü‡ßá‡¶Æ‡ßç‡¶¨‡¶∞" },
                                        { value: "October", label: "‡¶Ö‡¶ï‡ßç‡¶ü‡ßã‡¶¨‡¶∞" },
                                        { value: "November", label: "‡¶®‡¶≠‡ßá‡¶Æ‡ßç‡¶¨‡¶∞" },
                                        { value: "December", label: "‡¶°‡¶ø‡¶∏‡ßá‡¶Æ‡ßç‡¶¨‡¶∞" },
                                    ]}
                                />
                            </div>
                        </div>

                        <div className="mt-1 md:flex justify-between gap-3">

                            <div className="w-full relative">
                                <SelectField
                                    name="vehicle_category"
                                    label="‡¶á‡¶ï‡ßÅ‡¶á‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ß‡¶∞‡¶£"
                                    required
                                    options={[
                                        { value: "", label: "‡¶á‡¶ï‡ßÅ‡¶á‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ß‡¶∞‡¶£ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®..." },
                                        { value: "Exvator", label: "‡¶è‡¶ï‡ßç‡¶∏‡¶≠‡ßá‡¶ü‡¶∞" },
                                        { value: "Concrete Mixer", label: "‡¶ï‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶ü ‡¶Æ‡¶ø‡¶ï‡ßç‡¶∏‡¶æ‡¶∞" },
                                        { value: "Road Roller", label: "‡¶∞‡ßã‡¶≤‡¶æ‡¶∞" },
                                        { value: "Payloader", label: "‡¶™‡ßá-‡¶≤‡ßã‡¶°‡¶æ‡¶∞" },
                                        { value: "Chain Dozer", label: "‡¶ö‡ßá‡¶á‡¶® ‡¶°‡ßã‡¶ú‡¶æ‡¶∞" },
                                        { value: "Dump Truck", label: "‡¶°‡¶æ‡¶Æ‡ßç‡¶™ ‡¶ü‡ßç‡¶∞‡¶æ‡¶ï" },
                                        { value: "Crane", label: "‡¶ï‡ßç‡¶∞‡ßá‡¶®" },
                                        { value: "Trailer", label: "‡¶ü‡ßç‡¶∞‡ßá‡¶á‡¶≤‡¶æ‡¶∞" },
                                        { value: "Other", label: "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø" }
                                    ]}
                                    control={control}
                                />
                            </div>
                            <div className="w-full relative">
                                <InputField name="vehicle_no" label="‡¶á‡¶ï‡ßÅ‡¶á‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞" required />
                            </div>
                            <div className="w-full relative">
                                <InputField name="vehicle_qty" label="‡¶á‡¶ï‡ßÅ‡¶á‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ" required />
                            </div>
                        </div>

                        <div className="mt-1 md:flex justify-between gap-3">
                            <div className="w-full relative">
                                <InputField name="address" label="‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ" required />
                            </div>
                            <div className="w-full relative">
                                <InputField name="amount" label="‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£" required />
                            </div>
                            <div className="w-full">
                                <SelectField
                                    name="status"
                                    label="‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ"
                                    required
                                    options={[
                                        { value: "Active", label: "‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡ßü" },
                                        { value: "Inactive", label: "‡¶®‡¶ø‡¶∑‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡ßü" },
                                    ]}
                                />
                            </div>
                        </div>

                        {/* ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶¨‡¶æ‡¶ü‡¶® */}
                        <div className="text-left">
                            <BtnSubmit loading={loading}>
                                {isEdit ? "‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®" : "‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®"}
                            </BtnSubmit>
                        </div>
                    </form>
                </FormProvider>
            </div>
        </div>
    );
};

export default GarageCustomerForm;
